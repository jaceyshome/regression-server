---
swagger: "2.0"
info:
  description: "Regression test server API"
  version: "1.0.0"
  title: "Regression test server API"
  contact:
    email: "jake.wang@sydney.edu.au"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/usyd-wdd/regression-test-server/1.0.0"
tags:
- name: "Admin"
  description: "Secured Admin-only, they have the privilege to \n1. add, update or\
    \ delete users\n"
- name: "Author"
  description: "Secured Author-only calls, they have the privilege to \n1. approve\
    \ visual regression results\n2. run visual and functional regression tests\n"
- name: "Viewer"
  description: "Operations available to the public, they have the privilege to\n1.\
    \ view histories\n"
schemes:
- "http"
paths:
  /login:
    post:
      tags:
      - "Viewer"
      summary: "log in"
      description: "login author or admin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "an author or admin to login"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "login success"
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/user"
        401:
          description: "Unauthorized"
  /logout:
    post:
      tags:
      - "Viewer"
      summary: "log out"
      description: "logout author or admin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "an author or admin to logout"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "logout success"
        401:
          description: "Unauthorized"
  /user:
    post:
      tags:
      - "Admin"
      summary: "adds a new user"
      description: "creates a new user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "an author or admin to add"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "user created"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/user"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /history:
    get:
      tags:
      - "Viewer"
      summary: "get the latest history"
      description: "includes a list of visual test results, the cucumber.json path\
        \ as \nthe functional test result  \n"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "get the latest history with its list of records"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/History"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/historyRecords"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "Author"
      summary: "adds a new history"
      description: "creates a new history at each of the regression test starting\
        \ point"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "history item to add"
        required: true
        schema:
          $ref: "#/definitions/History"
      responses:
        201:
          description: "item created"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/history"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /visual:
    get:
      tags:
      - "Author"
      summary: "get visual"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ record in the system\n"
      produces:
      - "application/json"
      parameters:
      - name: "searchReference"
        in: "query"
        description: "search reference of the given screenshot path\n\"visual-screenshot/linux-chrome/train/corporate/site-title.png\"\
          \n"
        required: false
        type: "string"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            $ref: "#/definitions/Record"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/recordVisualTestReference"
        400:
          description: "bad input parameter"
        404:
          description: "not found"
    post:
      tags:
      - "Author"
      summary: "adds a visual test result or a reference to the required history"
      description: "use it to add a visual test result or a reference"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a test result with the 'visualTest' type to add or \na reference\
          \ with the 'visualReference' type to add\n"
        required: true
        schema:
          $ref: "#/definitions/Record"
      responses:
        201:
          description: "item created"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/recordVisualTestResult"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exist"
    put:
      tags:
      - "Author"
      summary: "approve a failed visual test result"
      description: "an failed visual test result to update"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Record"
      responses:
        200:
          description: "Successful response."
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/visualTestResultApproved"
        400:
          description: "invalid input, object invalid"
  /functional:
    post:
      tags:
      - "Author"
      summary: "adds a functional test result"
      description: "adds the cucumber test result json file as a record to the rescord\
        \ schema\n"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Record"
      responses:
        201:
          description: "item created"
          examples:
            application/json:
              $ref: "#/externalDocs/x-mocks/recordVisualTestReference"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
definitions:
  User:
    type: "object"
    required:
    - "login"
    - "secret"
    properties:
      id:
        type: "string"
        format: "uid"
      login:
        type: "string"
      name:
        type: "string"
      secret:
        type: "string"
        format: "password"
      types:
        type: "array"
        items:
          type: "string"
    example:
      types:
      - "types"
      - "types"
      name: "name"
      id: "id"
      secret: "secret"
      login: "login"
  History:
    type: "object"
    required:
    - "instance"
    - "server"
    properties:
      id:
        type: "string"
        format: "uid"
      instance:
        type: "string"
        enum:
        - "linux-chrome"
        - "linux-firefox"
        - "mac-firefox"
        - "mac-chrome"
        - "win10-chrome"
        - "win10-firefox"
        - "win10-edge"
        - "win7-ie11"
      server:
        type: "string"
        enum:
        - "local"
        - "dev"
        - "test"
        - "train"
        - "prod"
      createdAt:
        type: "string"
        format: "data-time"
    example:
      server: "local"
      createdAt: "createdAt"
      instance: "linux-chrome"
      id: "id"
  Record:
    type: "object"
    required:
    - "historyId"
    - "resourceType"
    properties:
      historyId:
        type: "string"
        format: "uid"
      resourceType:
        type: "string"
        enum:
        - "visualTest"
        - "visualReference"
        - "functionalTest"
      isArchived:
        type: "boolean"
      visualReferenceId:
        type: "string"
      visualScreenShot:
        type: "string"
      visualDiffer:
        type: "string"
      functionalResult:
        type: "string"
      pass:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      approvedAt:
        type: "string"
        format: "date-time"
      approvedBy:
        type: "string"
        format: "uid"
        description: "user id"
    example:
      visualReferenceId: "visualReferenceId"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      pass: true
      historyId: "historyId"
      isArchived: true
      approvedBy: "approvedBy"
      visualDiffer: "visualDiffer"
      visualScreenShot: "visualScreenShot"
      approvedAt: "2000-01-23T04:56:07.000+00:00"
      resourceType: "visualTest"
      functionalResult: "functionalResult"
externalDocs:
  url: "http://#"
  x-mocks:
    user:
      id: "J84csdrjgGKdo2d"
      login: "abcd1234"
      name: "Jake Wang"
      secret: "d290f1ee6c544b0190e6d701748f0851"
      types:
      - "Admin"
      - "Author"
      - "Viewer"
    history:
      id: "hkgKJ84rjgGVXSXS"
      instance: "linux-chrome"
      server: "train"
      createdAt: "2018-03-15T09:12:33.001Z"
    searchReference: "visual-screenshot/linux-chrome/train/corporate/site-title.png"
    recordVisualTestReferenceArchived:
      id: "fVtm3FkvKwaYRSH1"
      historyId: "jmVsOEZBWHaKPEOH"
      isArchived: true
      resourceType: "visualReference"
      screenshot: "visual-screenshot/linux-chrome/train/corporate/site-title.png"
      createdAt: "2018-03-15T09:12:33.001Z"
    recordVisualTestReference:
      id: "NZnTG4StwzPI2qoE"
      historyId: "iYEFCpQB3T20O9iE"
      resourceType: "visualReference"
      screenshot: "visual-screenshot/linux-chrome/train/corporate/accordion.png"
      createdAt: "2018-03-15T09:12:33.001Z"
    recordVisualTestResult:
      id: "KcpAj5Y2O6N7F5ul"
      historyId: "hkgKJ84rjgGVXSXS"
      resourceType: "visualTest"
      visualReferenceId: "NZnTG4StwzPI2qoE"
      visualScreenshot: "visual-screenshot/linux-chrome/train/corporate/accordion.png"
      visualDiffer: "visual-differ/linux-chrome/train/corporate/accordion.png"
      pass: false
      createdAt: "2018-03-15T09:12:33.001Z"
    recordVisualTestResultPass:
      id: "KcpAj5Y2O6N7F5ul"
      historyId: "hkgKJ84rjgGVXSXS"
      resourceType: "visualTest"
      visualReferenceId: "NZnTG4StwzPI2qoE"
      visualScreenshot: "visual-screenshot/linux-chrome/train/corporate/accordion.png"
      pass: true
      createdAt: "2018-03-15T09:12:33.001Z"
    visualTestResultApproved:
      id: "wYUcu6GcUXqHZm1M"
      historyId: "hkgKJ84rjgGVXSXS"
      resourceType: "visualTest"
      visualReferenceId: "NZnTG4StwzPI2qoE"
      visualScreenshot: "visual-screenshot/linux-chrome/train/corporate/accordion-component.png"
      visualDiffer: "visual-differ/linux-chrome/train/corporate/accordion-component.png"
      pass: true
      createdAt: "2018-03-15T09:12:33.001Z"
      approvedAt: "2018-03-25T09:12:33.001Z"
      approvedBy: "J84csdrjgGKdo2d"
    functionalTestResult:
      id: "OzXiStRgcuoJsD3X"
      historyId: "hkgKJ84rjgGVXSXS"
      resourceType: "functionalTest"
      test: "functional-test/linux-chrome/train/cucumber.json"
      createdAt: "2018-03-15T09:12:33.001Z"
    historyRecords:
      id: "hkgKJ84rjgGVXSXS"
      instance: "linux-chrome"
      server: "train"
      createdAt: "2018-03-15T09:12:33.001Z"
      visualTestResults:
      - $ref: "#/externalDocs/x-mocks/recordVisualTestResult"
      functionalTestResult:
        $ref: "#/externalDocs/x-mocks/functionalTestResult"
